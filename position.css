/*position 属性指定了元素的定位类型。*/

/*position 属性的五个值：*/

/*static*/
/*relative*/
/*fixed*/
/*absolute*/
/*sticky*/
/*元素可以使用的顶部，底部，左侧和右侧属性定位。然而，这些属性无法工作，除非是先设定position属性。他们也有不同的工作方式，这取决于定位方法。*/


/*static 定位*/
/*HTML元素的默认值，即没有定位，元素出现在正常的流中。*/

/*静态定位的元素不会受到 top, bottom, left, right影响。*/

div.static{
    position:static;
    border:1px solid blue;
}



/*fixed 定位*/
/*元素的位置相对于浏览器窗口是固定位置。*/

/*即使窗口是滚动的它也不会移动：*/


p.fixed{
    position:fixed; /*first*/
    top:30px;
    right:5px;

}
/*Fixed定位使元素的位置与文档流无关，因此不占据空间*/

/*relative 定位*/
/*相对定位元素的定位是相对其正常位置。*/

h2.pos_left{
    position:relative;
    left:20px;
}
h2.pos_right{
    position:relative;
    left:-20px;
}


ht.pos_top{
    position:top;
    top:20px;
}

/*absolute 定位*/
/*绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<html>:*/

h2{
    postition:relative;
    left:100px;
    top:150px;
}

/*absolute 定位使元素的位置与文档流无关，因此不占据空间。*/

/*absolute 定位的元素和其他元素重叠。*/


/*sticky 定位*/
/*sticky 英文字面意思是粘，粘贴，所以可以把它称之为粘性定位。*/

/*position: sticky; 基于用户的滚动位置来定位。*/

                  /*粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。*/

                  /*它的行为就像 position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。*/

                                                                                /*元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。*/

                                                                                /*这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。*/

/*注意: Internet Explorer, Edge 15 及更早 IE 版本不支持 sticky 定位。 Safari 需要使用 -webkit- prefix (查看以下实例)。*/

/*relative+fixed*/

div.sticky{
    position:sticky;
    position:-webkit-sticky;
    top:0;
}


/*重叠的元素*/
/*元素的定位与文档流无关，所以它们可以覆盖页面上的其它元素*/

/*z-index属性指定了一个元素的堆叠顺序（哪个元素应该放在前面，或后面）*/

/*一个元素可以有正数或负数的堆叠顺序：*/
/*具有更高堆叠顺序的元素总是在较低的堆叠顺序元素的前面。*/

/*注意： 如果两个定位元素重叠，没有指定z - index，最后定位在HTML代码中的元素将被显示在最前面。*/

img{
    position:absolute;
    top:0px;
    left:0px;
    z-index:-1;  /*this set will lead to the image be fu gai by text*/
}


/*如何设置元素的外形。该元素被剪裁成这种形状，并显示出来。*/
img{
    clip:rect(0px,60px,200px,0px);
}


/*overflow属性创建一个滚动条，当一个元素的内容在指定的区域过大时如何设置以适应。*/
div.scroll{
    width:100px;
    height:100px;
    overflow:scroll;
    overflow:scroll;
    overflow:scroll;
    overflow:scroll;
    overflow:scroll;
}


/*如何设置浏览器来自动处理溢出*/
/*content probably will over the div*/
div{
    width:500px;
    height:500px;
    overflow:auto;
}

/*如何改变光标*/
span.cursor{

    cursor:auto;
    cursor:crosshair;
    cursor:default;
    cursor:e-resize;
    cursor:help;
    cursor:move;
    cursor:n-resize;
    cursor:ne-resize;
    cursor:nw-resize;
    cursor:pointer;
    cursor:progress;
    cursor:s-resize;
    cursor:se-resize;
}





relative：定位是相对于自身位置定位（设置偏移量的时候，会相对于自身所在的位置偏移）。设置了 relative 的元素仍然处在文档流中，元素的宽高不变，设置偏移量也不会影响其他元素的位置。最外层容器设置为 relative 定位，在没有设置宽度的情况下，宽度是整个浏览器的宽度。

absolute：定位是相对于离元素最近的设置了绝对或相对定位的父元素决定的，如果没有父元素设置绝对或相对定位，则元素相对于根元素即 html 元素定位。设置了 absolute 的元素脱了了文档流，元素在没有设置宽度的情况下，宽度由元素里面的内容决定。脱离后原来的位置相当于是空的，下面的元素会来占据位置。



